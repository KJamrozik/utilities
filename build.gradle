// Author: Konrad Jamrozik, github.com/konrad-jamrozik

import static groovy.io.FileType.FILES

group 'com.github.konrad-jamrozik'
version 'dev'

buildscript {

  ext.kotlin_version = '1.0.1-2'

  repositories {
    mavenCentral()
  }

  dependencies {
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
  }
}

apply plugin: 'groovy'
apply plugin: 'kotlin'
apply plugin: 'maven'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

repositories {
  mavenCentral()
}

task sourcesJar(type: Jar, dependsOn: tasks.classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
  from sourceSets.test.allSource
}

task groovydocJar(type: Jar, dependsOn: tasks.groovydoc) {
  classifier = 'groovydoc'
  from groovydoc.destinationDir
}

artifacts {
  archives sourcesJar
  archives groovydocJar
}

dependencies {

  compile 'org.codehaus.groovy:groovy-all:2.4.6'
  compile 'commons-io:commons-io:2.4'
  compile 'com.google.jimfs:jimfs:1.0'

  compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
  
  testCompile group: 'junit', name: 'junit', version: '4.12'

  jarNamesInBuiltResourcesDir().each { testRuntime files(it) }
}

List<File> jarNamesInBuiltResourcesDir() {
  SourceSetOutput output = sourceSets.test.output
  List<File> jars = []
  output.resourcesDir.eachFileMatch FILES, ~/.*\.jar/, { jars << it }
  return jars
}


task testi(type: Test, dependsOn: tasks.testClasses) { Test it ->
  it.outputs.upToDateWhen {false}
  it.include '**/*ResourcePathTest*'
}

apply from: file("log.gradle")

task debug << { Task it ->
  it.group = "help"
  
  println "sourceSets.test.compileClasspath"
  sourceSets.test.compileClasspath.each {println it}
  println "sourceSets.test.runtimeClasspath"
  sourceSets.test.runtimeClasspath.each {println it}
}