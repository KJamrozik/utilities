// DroidMate, an automated execution generator for Android apps.
// Copyright (C) 2012-2016 Konrad Jamrozik
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
// email: jamrozik@st.cs.uni-saarland.de
// web: www.droidmate.org

// Author: Konrad Jamrozik, github.com/konrad-jamrozik

import groovy.io.FileType

group 'com.github.konrad-jamrozik'
version 'dev'

buildscript {

  ext.kotlin_version = '1.0.5'

  repositories {
    mavenCentral()
  }

  dependencies {
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
  }
}

apply plugin: 'groovy'
apply plugin: 'kotlin'
apply plugin: 'maven'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

repositories {
  mavenCentral()
}

dependencies {
  compile 'org.slf4j:slf4j-api:1.7.20'
  compile 'org.slf4j:slf4j-simple:1.7.20'
}

task sourcesJar(type: Jar, dependsOn: tasks.classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
  from sourceSets.test.allSource
}

task groovydocJar(type: Jar, dependsOn: tasks.groovydoc) {
  classifier = 'groovydoc'
  from groovydoc.destinationDir
}

artifacts {
  archives sourcesJar
  archives groovydocJar
}

dependencies {

  compile 'org.codehaus.groovy:groovy-all:2.4.6'
  compile 'commons-io:commons-io:2.4'
  compile 'com.google.jimfs:jimfs:1.0'

  compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

  testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
  testCompile 'junit:junit:4.12'
  testCompile 'org.hamcrest:hamcrest-library:1.3'

  jarNamesInBuiltResourcesDir().each { testRuntime files(it) }
}

List<File> jarNamesInBuiltResourcesDir() {
  
  SourceSet test = sourceSets.test
  SourceSetOutput output = test.output

  Set<File> resSrcDirs = test.resources.srcDirs
  assert resSrcDirs.size() == 1
  File resSrcDir = resSrcDirs.first()

  List<File> jars = []
  resSrcDir.eachFileMatch FileType.FILES, ~/.*\.jar/, { jars << new File(output.resourcesDir, it.name) }
  return jars
}


task testi(type: Test, dependsOn: tasks.testClasses) { Test it ->
  it.outputs.upToDateWhen {false}
  it.include '**/*ResourcePathTest*'
}

apply from: file("log.gradle")

task debug { Task it ->
  it.group = "help"
  doLast {  
    
    println "sourceSets.test.compileClasspath"
    sourceSets.test.compileClasspath.each {println it}
    println "sourceSets.test.runtimeClasspath"
    sourceSets.test.runtimeClasspath.each {println it}
  }
}