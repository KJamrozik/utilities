// Author: Konrad Jamrozik, github.com/konrad-jamrozik

import groovy.io.FileType

buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.0-M4'
  }
}

plugins {
  id "org.jetbrains.kotlin.jvm" version "1.1.1"
}
ext.kotlin_version = '1.1.1'

group 'com.github.konrad-jamrozik'
version 'dev'

apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'org.junit.platform.gradle.plugin'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

repositories {
  mavenCentral()
}

dependencies {
  compile 'org.slf4j:slf4j-api:1.7.20'
  compile 'org.slf4j:slf4j-simple:1.7.20'
}

// Necessary to make build work. Looks like Groovy doesn't maintain necessary ordering with Kotlin.
compileGroovy.dependsOn("copyMainKotlinClasses")

task sourcesJar(type: Jar, dependsOn: tasks.classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
  from sourceSets.test.allSource
}

task groovydocJar(type: Jar, dependsOn: tasks.groovydoc) {
  classifier = 'groovydoc'
  from groovydoc.destinationDir
}

artifacts {
  archives sourcesJar
  archives groovydocJar
}

dependencies {

  compile 'org.codehaus.groovy:groovy-all:2.4.6'
  compile 'commons-io:commons-io:2.4'
  compile 'com.google.jimfs:jimfs:1.0'

  compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

  testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
  testCompile 'junit:junit:4.12'
  testCompile 'org.junit.jupiter:junit-jupiter-api:5.0.0-M4'
  
  testCompile 'org.hamcrest:hamcrest-library:1.3'

  testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.0.0-M4'
  testRuntime 'org.junit.vintage:junit-vintage-engine:4.12.0-M4'

  jarNamesInBuiltResourcesDir().each { testRuntime files(it) }
}

List<File> jarNamesInBuiltResourcesDir() {
  
  SourceSet test = sourceSets.test
  SourceSetOutput output = test.output

  Set<File> resSrcDirs = test.resources.srcDirs
  assert resSrcDirs.size() == 1
  File resSrcDir = resSrcDirs.first()

  List<File> jars = []
  resSrcDir.eachFileMatch FileType.FILES, ~/.*\.jar/, { jars << new File(output.resourcesDir, it.name) }
  return jars
}


task testi(type: Test, dependsOn: tasks.testClasses) { Test it ->
  it.outputs.upToDateWhen {false}
  it.include '**/*ResourcePathTest*'
}

apply from: file("log.gradle")

task debug { Task it ->
  it.group = "help"
  doLast {  
    
    println "sourceSets.test.compileClasspath"
    sourceSets.test.compileClasspath.each {println it}
    println "sourceSets.test.runtimeClasspath"
    sourceSets.test.runtimeClasspath.each {println it}
  }
}